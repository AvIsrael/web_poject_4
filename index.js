!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=this._formElement.querySelectorAll(this._inputSelector),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_hideValidationMessage(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),console.log(this._inputList),this._inputList.forEach((e=>{this._hideInputError(e)}))}resetWholeForm(){this._hideValidationMessage(),this._toggleButtonState(),this._formElement.reset()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,n,r,i,o,a,l){let{handleCardClick:h,handleLikeButton:c,handleDeleteCard:u}=l;t(this,"removeCardFromDOM",(()=>{this._element.remove(),this._element=null})),t(this,"handleLikeCard",(e=>{this._likes=e,this._renderLikes()})),this._name=e,this._link=s,this._cardSelector=a,this._handleCardClick=h,this._handleLikeButton=c,this._handleDeleteCard=u,this._id=n,this._userId=i,this._ownerId=r,this._likes=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".elements__item").cloneNode(!0)}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>this._handleDeleteCard(this._id))),this._likeButton.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._cardImage.addEventListener("click",(()=>this._handleCardClick({name:this._name,src:this._link})))}isLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){this._likesCount.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("elements__button-heart_active"):this._likeButton.classList.remove("elements__button-heart_active")}generateCard(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".elements__grid-image"),this._cardName=this._element.querySelector(".elements__description"),this._likesCount=this._element.querySelector(".elements__amount-likes"),this._likeButton=this._element.querySelector(".elements__button-heart"),this._deleteButton=this._element.querySelector(".elements__button-delete"),this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt="Photo of ".concat(this._name),this._cardName.textContent=this._name,this._renderLikes(),this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this._element}}const n={formSelector:".popup__form",inputSelector:".popup__item",submitButtonSelector:".popup__button-sbmt",inactiveButtonClass:"popup__button-sbmt_disabled",inputErrorClass:"popup__item_type_error",errorClass:"popup__error_visible"};class r{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__button"))&&this.close()}))}}class i extends r{constructor(e,t,s){super(e),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".popup__form"),this._buttonSubmit=this._popupElement.querySelector(".popup__button-sbmt"),this._buttonTextValue=s,this._inputs=Array.from(this._popupForm.querySelectorAll(".popup__item"))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}formReset(){this._popupForm.reset()}showMessageLoading(){this._buttonSubmit.value="Saving..."}hideMessageLoading(){this._buttonSubmit.value=this._buttonTextValue}close(){super.close(),this._popupForm.reset()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValues())))}}const o=document.querySelector(".profile__button-unusual"),a=document.querySelector(".profile__button"),l=document.getElementById("formElementEdit"),h=document.getElementById("formElementAdd"),c=document.getElementById("formElementImage"),u=document.getElementById("name"),d=document.getElementById("about"),_=document.querySelector(".profile__image-overlay"),m=new class{constructor(e){let{baseUrl:t,headers:s}=e;var n,r;r=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))),(n="_customFetch")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._baseUrl=t,this._headers=s}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}getInitialCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}createCard(e){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}editProfile(e){let{name:t,about:s}=e;return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}editAvatar(e){let{avatar:t}=e;return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:t})})}likeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}unlikeCard(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cc8ab050-a9c0-4b6f-94ee-d21a7e05974a","Content-Type":"application/json"}}),p=new class{constructor(e){let{userNameSelector:t,userJobSelector:s,avatarSelector:n}=e;this._userNameElement=document.querySelector(t),this._userJobElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._userNameElement.textContent,about:this._userJobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._userNameElement.textContent=t,this._userJobElement.textContent=s}setAvatar(e){let{avatar:t}=e;this._avatarElement.style.backgroundImage="url(".concat(t||this._avatar,")")}}({userNameSelector:".profile__hero",userJobSelector:".profile__role",avatarSelector:".profile__avatar"}),E=new i("#popup-edit",(function(e){E.showMessageLoading(),m.editProfile(e).then((e=>{p.setUserInfo(e),E.formReset(),E.close()})).catch((e=>{console.log("Error: ".concat(e))})).finally((()=>{}))}),"Save"),b=new i("#popup-add",(function(e){b.showMessageLoading();const t={name:e.title,link:e["image-link"]};m.createCard(t).then((e=>{y.addItem(e.name,e.link,e._id,e.owner._id,e.likes),b.formReset(),b.close()})).catch((e=>{console.log("Error: ".concat(e))})).finally((()=>{b.hideMessageLoading()}))}),"Create"),v=new class extends r{constructor(e){super(e),this._imageZoom=this._popupElement.querySelector(".popup__viewer-image"),this._imageZoomTitle=this._popupElement.querySelector(".popup__viewer-text")}open(e,t){super.open(),this._imageZoom.src=t,this._imageZoom.alt="Photo of ".concat(e),this._imageZoomTitle.textContent=e}}("#popup-viewer"),g=new class extends r{constructor(e){super(e),this._inputSubmit=this._popupElement.querySelector(".popup__button-sbmt")}setAction(e){this._handleSubmit=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}showMessageLoading(){this._inputSubmit.value="Saving..."}hideMessageLoading(){this._inputSubmit.value="Saved"}}("#popup-delete"),L=new i("#popup-profile-image",(function(e){L.showMessageLoading(),m.editAvatar(e).then((e=>{p.setAvatar(e),L.formReset(),L.close()})).catch((e=>{console.log("Error: ".concat(e))})).finally((()=>{L.hideMessageLoading()}))}),"Save");E.setEventListeners(),b.setEventListeners(),v.setEventListeners(),g.setEventListeners(),L.setEventListeners(),o.addEventListener("click",(function(){E.open();const{name:e,about:t}=p.getUserInfo();S.resetWholeForm(),u.value=e,d.value=t}));const f=new e(n,h);f.enableValidation();const S=new e(n,l);S.enableValidation();const C=new e(n,c);C.enableValidation(),a.addEventListener("click",(function(){b.open(),f.resetWholeForm()}));const y=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e,t,s,n,r){const i=this._renderer(e,t,s,n,r);this._container.prepend(i)}renderItems(e){e.forEach((e=>{this.addItem(e.name,e.link,e._id,e.owner._id,e.likes)}))}}({renderer:(e,t,n,r,i)=>{const o=new s(e,t,n,r,k,i,"#card",{handleCardClick:()=>{v.open(e,t)},handleDeleteCard:e=>{g.open(),g.setAction((()=>{g.showMessageLoading(),m.deleteCard(e).then((()=>{o.removeCardFromDOM(),g.close()})).catch((e=>{console.log("Error: ".concat(e))})).finally((()=>{g.hideMessageLoading()}))}))},handleLikeButton:e=>{o.isLiked()?m.unlikeCard(e).then((e=>{o.handleLikeCard(e.likes)})).catch((e=>{console.log("Error: ".concat(e))})):m.likeCard(e).then((e=>{o.handleLikeCard(e.likes)})).catch((e=>{console.log("Error: ".concat(e))}))}});return o.generateCard()}},".elements__items");let k;Promise.all([m.getUserInfo(),m.getInitialCards()]).then((e=>{let[t,s]=e;k=t._id,p.setUserInfo({name:t.name,about:t.about}),p.setAvatar({avatar:t.avatar}),y.renderItems(s.reverse())})).catch((e=>{console.log("Error: ".concat(e))})),_.addEventListener("click",(function(){L.open(),C.resetWholeForm()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,