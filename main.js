!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=this._formElement.querySelectorAll(this._inputSelector),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_hideValidationMessage(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._inputList.forEach((e=>{this._hideInputError(e)}))}resetWholeForm(){this._hideValidationMessage(),this._toggleButtonState(),this._formElement.reset()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,n,o){t(this,"_handleDeleteButton",(()=>{this._element.remove(),this._element=null})),t(this,"_handleLikeButton",(()=>{this._element.querySelector(".elements__button-heart").classList.toggle("elements__button-heart_active")})),this._name=e,this._link=s,this._cardSelector=n,this._handleCardClick=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".elements__item").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".elements__button-delete").addEventListener("click",this._handleDeleteButton),this._element.querySelector(".elements__button-heart").addEventListener("click",this._handleLikeButton),this._element.querySelector(".elements__grid-image").addEventListener("click",(()=>this._handleCardClick({name:this._name,src:this._link})))}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".elements__grid-image"),t=this._element.querySelector(".elements__description");return e.src=this._link,e.alt="Photo of ".concat(this._name),t.textContent=this._name,this._element}}const n={formSelector:".popup__form",inputSelector:".popup__item",submitButtonSelector:".popup__button-sbmt",inactiveButtonClass:"popup__button-sbmt_disabled",inputErrorClass:"popup__item_type_error",errorClass:"popup__error_visible"};class o{constructor(e){var t,s;s=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__button"))&&this.close()}))}}class i extends o{constructor(e,t){super(e),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".popup__form"),this._inputs=Array.from(this._popupForm.querySelectorAll(".popup__item"))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}close(){super.close(),this._popupForm.reset()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValues())))}}const r=document.querySelector(".profile__button-unusual"),l=document.querySelector(".profile__button"),a=document.getElementById("formElementEdit"),u=document.getElementById("formElementAdd"),c=document.getElementById("name"),_=document.getElementById("about"),m=new class{constructor(e){let{userNameSelector:t,userJobSelector:s}=e;this._userNameElement=document.querySelector(t),this._userJobElement=document.querySelector(s)}getUserInfo(){return{name:this._userNameElement.textContent,job:this._userJobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._userNameElement.textContent=t,this._userJobElement.textContent=s}}({userNameSelector:".profile__hero",userJobSelector:".profile__role"}),p=new i("#popup-edit",(function(e){m.setUserInfo(e),p.close()})),h=new i("#popup-add",(function(e){v.addItem(e.title,e["image-link"]),h.close()})),d=new class extends o{constructor(e){super(e),this._imageZoom=this._popupElement.querySelector(".popup__viewer-image"),this._imageZoomTitle=this._popupElement.querySelector(".popup__viewer-text")}open(e,t){super.open(),this._imageZoom.src=t,this._imageZoom.alt="Photo of ".concat(e),this._imageZoomTitle.textContent=e}}("#popup-viewer");p.setEventListeners(),h.setEventListeners(),d.setEventListeners(),r.addEventListener("click",(function(){p.open();const{name:e,job:t}=m.getUserInfo();b.resetWholeForm(),c.value=e,_.value=t}));const E=new e(n,u);E.enableValidation();const b=new e(n,a);b.enableValidation(),l.addEventListener("click",(function(){h.open(),E.resetWholeForm()}));const v=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e,t){const s=this._renderer(e,t);this._container.prepend(s)}renderItems(){this._items.forEach((e=>{this.addItem(e.name,e.link)}))}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:(e,t)=>new s(e,t,"#card",(()=>d.open(e,t))).generateCard()},".elements__items");v.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,